from django.contrib.auth.models import AbstractUser
from django.db import models
from django.contrib.auth import get_user_model
from datetime import date, timedelta  # ‚úÖ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫!
from decimal import Decimal


class CustomUser(AbstractUser):
    ROLE_CHOICES = [
        ("HR", "HR"),
        ("Manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä"),
        ("Accountant", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä"),
        ("Employee", "–û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫"),
        ("Admin", "–ê–¥–º–∏–Ω"),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default="Employee")

    def __str__(self):
        return self.username


POSITION_CHOICES = [
    ('Manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'),
    ('Developer', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'),
    ('Analyst', '–ê–Ω–∞–ª–∏—Ç–∏–∫'),
    ('HR', 'HR'),
    ('Accountant', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'),
    ('Designer', '–î–∏–∑–∞–π–Ω–µ—Ä'),
]

User = get_user_model()

class Department(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Employee(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.SET_NULL, null=True, blank=True, unique=True)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=15, blank=True, null=True)
    position = models.CharField(max_length=20, choices=POSITION_CHOICES)
    department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, blank=True)  # üëà –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å
    date_hired = models.DateField(auto_now_add=True)
    base_salary = models.DecimalField(max_digits=10, decimal_places=2)
    is_active = models.BooleanField(default=True)
    overtime_hours = models.PositiveIntegerField(default=0)
    unpaid_leave_days = models.PositiveIntegerField(default=0)

    def get_work_experience(self):
        today = date.today()
        years = today.year - self.date_hired.year
        months = today.month - self.date_hired.month
        if months < 0:
            years -= 1
            months += 12
        return f"{years} –ª–µ—Ç, {months} –º–µ—Å—è—Ü–µ–≤"

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.position})"


class Contract(models.Model):
    CONTRACT_TYPES = [
        ("Full-time", "Full-time"),
        ("Part-time", "Part-time"),
        ("Temporary", "Temporary"),
    ]

    employee = models.OneToOneField(Employee, on_delete=models.CASCADE)
    start_date = models.DateField(auto_now_add=True)  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è!
    end_date = models.DateField(blank=True, null=True)
    contract_type = models.CharField(max_length=50, choices=CONTRACT_TYPES, default="Full-time")

    def calculate_end_date(self):
        if self.contract_type == "Full-time":
            return self.start_date + timedelta(days=730)
        elif self.contract_type == "Part-time":
            return self.start_date + timedelta(days=365)
        elif self.contract_type == "Temporary":
            return self.start_date + timedelta(days=180)
        return None

    def save(self, *args, **kwargs):
        if not self.end_date:
            self.end_date = self.calculate_end_date()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Contract for {self.employee.first_name} {self.employee.last_name} ({self.contract_type})"


class PositionHistory(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name="position_history")
    old_position = models.CharField(max_length=50)
    new_position = models.CharField(max_length=50)
    changed_at = models.DateField(auto_now_add=True)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name}: {self.old_position} ‚Üí {self.new_position}"


class Leave(models.Model):
    LEAVE_TYPE_CHOICES = [
        ("Vacation", "–û—Ç–ø—É—Å–∫"),
        ("Sick", "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π"),
        ("Unpaid", "–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫"),
    ]

    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    leave_type = models.CharField(max_length=20, choices=LEAVE_TYPE_CHOICES)
    start_date = models.DateField()
    end_date = models.DateField()
    approved = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –æ—Ç–ø—É—Å–∫ –ª–∏–º–∏—Ç –≤ 28 –¥–Ω–µ–π (–¥–ª—è –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞)
        total_days = (self.end_date - self.start_date).days
        if self.leave_type == 'Vacation' and total_days > 28:
            raise ValueError("–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 28 –¥–Ω–µ–π –≤ –≥–æ–¥—É.")

        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} - {self.get_leave_type_display()}"


# ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Salary: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –æ—Ç–ø—É—Å–∫–∞
class Salary(models.Model):
    MONTH_CHOICES = [
        (1, "–Ø–Ω–≤–∞—Ä—å"), (2, "–§–µ–≤—Ä–∞–ª—å"), (3, "–ú–∞—Ä—Ç"), (4, "–ê–ø—Ä–µ–ª—å"),
        (5, "–ú–∞–π"), (6, "–ò—é–Ω—å"), (7, "–ò—é–ª—å"), (8, "–ê–≤–≥—É—Å—Ç"),
        (9, "–°–µ–Ω—Ç—è–±—Ä—å"), (10, "–û–∫—Ç—è–±—Ä—å"), (11, "–ù–æ—è–±—Ä—å"), (12, "–î–µ–∫–∞–±—Ä—å")
    ]
    employee = models.ForeignKey("Employee", on_delete=models.CASCADE)
    base_salary = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    bonuses = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    deductions = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    overtime_hours = models.PositiveIntegerField(default=0)  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    unpaid_leave_days = models.PositiveIntegerField(default=0)  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    total_salary = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    month = models.IntegerField(choices=MONTH_CHOICES)
    year = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def calculate_salary(self):
        salary = Decimal(self.base_salary)

        # ‚ûï –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ (1.5x –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏)
        hourly_rate = salary / Decimal(160)
        overtime_pay = Decimal(self.overtime_hours) * hourly_rate * Decimal("1.5")
        salary += overtime_pay

        # ‚ûñ –í—ã—á–∏—Ç–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –æ—Ç–ø—É—Å–∫–∞ (–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
        daily_rate = salary / Decimal(30)
        unpaid_deduction = Decimal(self.unpaid_leave_days) * daily_rate
        salary -= unpaid_deduction

        # ‚ûï –ë–æ–Ω—É—Å—ã –∏ ‚ûñ –≤—ã—á–µ—Ç—ã
        salary += Decimal(self.bonuses)
        salary -= Decimal(self.deductions)

        self.total_salary = max(salary, Decimal(0))  # üöÄ –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã

    def save(self, *args, **kwargs):
        self.calculate_salary()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} - {self.total_salary} ({self.month}/{self.year})"


class Training(models.Model):
    title = models.CharField(max_length=255, unique=True)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    description = models.TextField(blank=True, null=True)  # –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    start_date = models.DateField()  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞
    end_date = models.DateField()  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞

    def __str__(self):
        return self.title


class EmployeeTraining(models.Model):
    employee = models.ForeignKey('Employee', on_delete=models.CASCADE)  # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
    training = models.ForeignKey(Training, on_delete=models.CASCADE)  # –ö—É—Ä—Å
    status = models.CharField(
        max_length=20,
        choices=[("assigned", "–ù–∞–∑–Ω–∞—á–µ–Ω"), ("completed", "–ó–∞–≤–µ—Ä—à—ë–Ω")],
        default="assigned"
    )  # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    completion_date = models.DateField(blank=True, null=True)  # –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    def __str__(self):
        return f"{self.employee} - {self.training} ({self.status})"


from django.shortcuts import render, redirect, get_list_or_404
from django.http import JsonResponse, HttpResponse
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework import viewsets
from rest_framework.decorators import api_view, permission_classes, action
from .models import Employee, Salary, Leave, Contract, PositionHistory, Training, EmployeeTraining,Department
from .serializers import (
    EmployeeSerializer, SalarySerializer, LeaveSerializer, ContractSerializer,
    PositionHistorySerializer, TrainingSerializer, EmployeeTrainingSerializer, DepartmentSerializer
)
from django.utils.decorators import method_decorator
from .permissions import (
    IsAdmin, IsHR, ManagerEmployeeContractPermission, LeavePermission,
    AccountantPermission, IsEmployee, IsManager, IsAccountant
)
from django.contrib.auth import login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required, user_passes_test
from .forms import EmployeeRegistrationForm
from datetime import date, timedelta, datetime  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å!
from decimal import Decimal
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import OrderingFilter
import io
import pandas as pd


# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å HR –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_hr_or_admin(user):
    return user.is_authenticated and (user.role in ["HR", "Admin"])


# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º
def is_accountant(user):
    return user.is_authenticated and user.role == "Accountant"


# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
def is_manager(user):
    return user.is_authenticated and user.role == "Manager"


# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–æ–±—ã—á–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫)
def is_employee(user):
    return user.is_authenticated and user.role == "Employee"


def login_view(request):
    if request.method == "POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('/')  # –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    else:
        form = AuthenticationForm()

    return render(request, "login.html", {"form": form})


def register_view(request):
    if request.method == "POST":
        form = EmployeeRegistrationForm(request.POST)
        if form.is_valid():
            user = User.objects.create_user(
                username=form.cleaned_data["username"],
                password=form.cleaned_data["password"]
            )
            employee = form.save(commit=False)
            employee.user = user  # üëà –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            employee.save()
            login(request, user)  # üëà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return redirect('/')
    else:
        form = EmployeeRegistrationForm()

    return render(request, "register.html", {"form": form})


def calculate_salary_deductions(employee):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ –¥–Ω–∏ –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    unpaid_leaves = Leave.objects.filter(employee=employee, leave_type="Unpaid")

    total_unpaid_days = sum((leave.end_date - leave.start_date).days for leave in unpaid_leaves)

    daily_rate = employee.base_salary / 30  # –°—á–∏—Ç–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞–≤–∫—É
    deduction = total_unpaid_days * daily_rate

    return deduction


def add_overtime(request, employee_id, hours):
    employee = Employee.objects.get(id=employee_id)
    employee.overtime_hours += hours
    employee.save()
    return JsonResponse({'status': 'success', 'overtime_hours': employee.overtime_hours})


@login_required
def redirect_after_login(request):
    user = request.user

    if not user.is_authenticated:
        return redirect("/login/")  # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞

    role = user.role  # ‚úÖ –ë–µ—Ä—ë–º —Ä–æ–ª—å –ø—Ä—è–º–æ –∏–∑ CustomUser

    if role == "HR":
        return redirect("/employees/")  # HR –≤–∏–¥–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    elif role == "Accountant":
        return redirect("/salaries/")  # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä –≤–∏–¥–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
    elif role == "Manager":
        return redirect("/leaves/")  # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –æ—Ç–ø—É—Å–∫–∞
    elif role == "Employee":
        return redirect("/leaves/")  # –û–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ç–ø—É—Å–∫–∞

    return redirect("/")  # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


def logout_view(request):
    logout(request)
    return redirect('/login/')
# üîπ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã

def home(request):
    return render(request, 'home.html')

@login_required
@user_passes_test(lambda u: u.role in ["HR"])
def position_history_list(request):
    history = PositionHistory.objects.all().order_by("-changed_at")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    return render(request, 'employees/position_history.html', {"history": history})


@login_required
@user_passes_test(lambda u: u.role in ["HR", "Admin", "Manager"])
def employees_list(request):
    return render(request, 'employees/employees.html')


@login_required
@user_passes_test(lambda u: u.role in ["Accountant", "Manager"])
def salaries_list(request):
    return render(request, 'employees/salaries.html')


@login_required
@user_passes_test(lambda u: u.role in ["HR", "Admin", "Manager"])
def contracts_list(request):
    return render(request, 'employees/contracts.html')


@login_required
def leaves_list(request):
    user = request.user
    if user.role in ["HR", "Manager"]:
        return render(request, 'employees/leaves.html')
    return render(request, 'employees/leaves.html', {"employee_id": user.employee.id})


@login_required
def position_history_page(request):
    history = PositionHistory.objects.all().order_by("-changed_at")  # üëà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    return render(request, 'employees/position_history.html', {"history": history})


# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã —Å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º–∏ –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –æ—Ç–ø—É—Å–∫–æ–º
def generate_salary(request, employee_id):
    try:
        employee = Employee.objects.get(id=employee_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞—Ö –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –æ—Ç–ø—É—Å–∫–µ
        overtime_hours = getattr(employee, "overtime_hours", 0)
        unpaid_leave_days = getattr(employee, "unpaid_leave_days", 0)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
        salary = Salary.objects.create(
            employee=employee,
            base_salary=employee.base_salary,
            bonuses=0,
            deductions=0,
            overtime_hours=overtime_hours,  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            unpaid_leave_days=unpaid_leave_days,  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            month=str(datetime.now().month),  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü –∫–∞–∫ ID
            year=datetime.now().year
        )

        return JsonResponse({"status": "ok", "total_salary": salary.total_salary})
    except Employee.DoesNotExist:
        return JsonResponse({"error": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def generate_salary_report(request, report_format, month=None, year=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º –∏ –Ω–∞–ª–æ–≥–∞–º –≤ Excel –∏–ª–∏ PDF.
    """
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    salaries = Salary.objects.all()
    if month:
        salaries = salaries.filter(month=month)
    if year:
        salaries = salaries.filter(year=year)

    if not salaries.exists():
        return HttpResponse("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", status=404)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = [
        {
            "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": f"{s.employee.first_name} {s.employee.last_name}",
            "–ú–µ—Å—è—Ü": s.month,
            "–ì–æ–¥": s.year,
            "–ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞": s.base_salary,
            "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏": s.overtime_hours,
            "–ù–µ–æ–ø–ª–∞—á. –æ—Ç–ø—É—Å–∫": s.unpaid_leave_days,
            "–ë–æ–Ω—É—Å—ã": s.bonuses,
            "–í—ã—á–µ—Ç—ã": s.deductions,
            "–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞": s.total_salary
        }
        for s in salaries
    ]

    df = pd.DataFrame(data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É

    if report_format == "excel":
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ")
        output.seek(0)
        response = HttpResponse(output, content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        response["Content-Disposition"] = f'attachment; filename="salary_report_{month or "all"}_{year or "all"}.xlsx"'
        return response

    elif report_format == "pdf":
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase.ttfonts import TTFont
        from reportlab.pdfbase import pdfmetrics

        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="salary_report.pdf"'

        p = canvas.Canvas(response)

        # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        pdfmetrics.registerFont(TTFont('Arial', 'arial.ttf'))
        p.setFont("Arial", 12)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç

        p.drawString(100, 800, "–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º")

        salaries = Salary.objects.all()
        y = 780
        for salary in salaries:
            text = f"{salary.employee.first_name} {salary.employee.last_name}: {salary.total_salary} $"
            p.drawString(100, y, text)
            y -= 20

        p.showPage()
        p.save()
        return response

    else:
        return HttpResponse("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", status=400)


def training_page(request):
    return render(request, 'employees/training.html')


def courses_page(request):
    return render(request, 'employees/courses.html')


# üîπ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
# Employees ViewSet
class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            permission_classes = [IsAdmin | IsHR | IsManager | IsAccountant | AccountantPermission]
        elif self.action in ['create']:
            permission_classes = [IsAdmin | IsHR | ManagerEmployeeContractPermission]
        elif self.action in ['update', 'partial_update']:
            permission_classes = [IsAdmin | IsHR | ManagerEmployeeContractPermission]
        elif self.action == 'destroy':
            permission_classes = [IsAdmin | IsManager]
        else:
            permission_classes = [IsAdmin]
        return [permission() for permission in permission_classes]

    def perform_create(self, serializer):
        """–°–æ–∑–¥–∞—ë–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        employee = serializer.save()  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

        # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract_type = "Full-time"  # üëà –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Full-time
        start_date=date.today()   # üëà –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è
        end_date = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Å—Å—Ä–æ—á–Ω—ã–π

        if contract_type == "Full-time":
            end_date = start_date + timedelta(days=730)  # 2 –≥–æ–¥–∞
        elif contract_type == "Part-time":
            end_date = start_date + timedelta(days=365)  # 1 –≥–æ–¥
        elif contract_type == "Temporary":
            end_date = start_date + timedelta(days=180)  # 6 –º–µ—Å—è—Ü–µ–≤

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å —è–≤–Ω–æ–π –¥–∞—Ç–æ–π –Ω–∞—á–∞–ª–∞
        Contract.objects.create(
            employee=employee,
            contract_type="Full-time",
            start_date=date.today()  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å!
        )


# ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º SalaryViewSet: —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫
class SalaryViewSet(viewsets.ModelViewSet):
    queryset = Salary.objects.all()
    serializer_class = SalarySerializer
    permission_classes = [IsAuthenticated, IsAccountant]

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –º–µ—Å—è—Ü—É –∏ –≥–æ–¥—É
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = ['employee', 'year']
    ordering_fields = ["year", "month", "total_salary"]

    def get_queryset(self):
        queryset = Salary.objects.all()
        month = self.request.query_params.get("month", None)
        employee = self.request.query_params.get("employee", None)

        if month:
            try:
                month = int(month)  # ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
                queryset = queryset.filter(month=month)
            except ValueError:
                pass  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        if employee:
            queryset = queryset.filter(employee=employee)

        return queryset

    def get_permissions(self):
        print(
            f"üü¢ [get_permissions] method: {self.action}, user: {self.request.user.username}, role: {self.request.user.role}")

        if self.request.method in ["GET"]:
            permission_classes = [IsAdmin | IsAccountant | IsHR | IsManager]
        elif self.request.method in ["POST", "PUT", "PATCH"]:
            permission_classes = [IsAdmin | IsAccountant]
        elif self.action == "DELETE":  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            permission_classes = [IsAdmin | IsAccountant]
        else:
            permission_classes = [IsAdmin]

        return [permission() for permission in permission_classes]

    def perform_create(self, serializer):
        data = self.request.data

        employee_id = data.get("employee_id")
        month = data.get("month")
        year = data.get("year")
        base_salary = Decimal(data.get("base_salary", 0))
        bonuses = Decimal(data.get("bonuses", 0))
        deductions = Decimal(data.get("deductions", 0))
        overtime_hours = int(data.get("overtime_hours", 0))
        unpaid_leave_days = int(data.get("unpaid_leave_days", 0))

        try:
            employee = Employee.objects.get(id=employee_id)

            salary = Salary.objects.create(
                employee=employee,
                base_salary=base_salary,
                bonuses=bonuses,
                deductions=deductions,
                overtime_hours=overtime_hours,  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                unpaid_leave_days=unpaid_leave_days,  # ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                month=int(month),  # ‚úÖ –•—Ä–∞–Ω–∏–º –∫–∞–∫ —á–∏—Å–ª–æ
                year=int(year)
            )
            salary.save()
        except Employee.DoesNotExist:
            raise serializers.ValidationError({"employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"})

    def perform_update(self, serializer):
        instance = serializer.save()
        instance.calculate_salary()  # ‚úÖ –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        instance.save()

    def perform_destroy(self, instance):
        print(
            f"üî¥ [perform_destroy] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: user={self.request.user.username}, role={self.request.user.role}, instance={instance}")
        instance.delete()


class LeaveViewSet(viewsets.ModelViewSet):
    queryset = Leave.objects.all()
    serializer_class = LeaveSerializer
    permission_classes = [LeavePermission]  # <-- —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π!

    def get_queryset(self):
        user = self.request.user
        if user.role in ["Manager", "HR", "Admin"]:
            return Leave.objects.all()
        return Leave.objects.filter(employee=user.employee)


# Contract ViewSet
class ContractViewSet(viewsets.ModelViewSet):
    queryset = Contract.objects.all()
    serializer_class = ContractSerializer

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            permission_classes = [IsAdmin | IsHR | IsManager]
        elif self.action in ['create', 'update', 'partial_update']:
            permission_classes = [IsAdmin | IsHR | IsManager]
        elif self.action == 'destroy':
            permission_classes = [IsAdmin | IsManager]
        else:
            permission_classes = [IsAdmin]
        return [permission() for permission in permission_classes]


class EmployeeRestrictedViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = EmployeeSerializer
    permission_classes = [IsEmployee]

    def get_queryset(self):
        return Employee.objects.filter(id=self.request.user.employee.id)  # üëà –†–∞–±–æ—Ç–Ω–∏–∫ –≤–∏–¥–∏—Ç **—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ**!


class PositionHistoryViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = PositionHistory.objects.all()
    serializer_class = PositionHistorySerializer
    permission_classes = [IsHR | IsAdmin]  # –¢–æ–ª—å–∫–æ HR/Admin –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é


# ‚úÖ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏
class TrainingViewSet(viewsets.ModelViewSet):
    queryset = Training.objects.all()
    serializer_class = TrainingSerializer
    permission_classes = [IsHR]  # –¢–æ–ª—å–∫–æ HR –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Ä—Å–∞–º–∏


class EmployeeTrainingViewSet(viewsets.ModelViewSet):
    queryset = EmployeeTraining.objects.all()
    serializer_class = EmployeeTrainingSerializer

    @action(detail=False, methods=['post'])
    def bulk_assign(self, request):
        employees = request.data.get('employees', [])
        departments = request.data.get('departments', [])
        assign_all = request.data.get('assign_all', False)
        trainings = request.data.get('trainings', [])

        employee_qs = Employee.objects.none()

        if assign_all:
            employee_qs = Employee.objects.all()
        else:
            if departments:
                employee_qs |= Employee.objects.filter(department_id__in=departments)
            if employees:
                employee_qs |= Employee.objects.filter(id__in=employees)

        assigned = []
        for employee in employee_qs.distinct():
            for training_id in trainings:
                training = Training.objects.get(pk=training_id)
                obj, created = EmployeeTraining.objects.get_or_create(
                    employee=employee, training=training)
                if created:
                    assigned.append(obj)

        serializer = self.get_serializer(assigned, many=True)
        return Response(serializer.data, status=201)

class DepartmentViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Department.objects.all()
    serializer_class = DepartmentSerializer

